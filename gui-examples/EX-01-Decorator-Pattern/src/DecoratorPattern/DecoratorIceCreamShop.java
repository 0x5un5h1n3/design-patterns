package DecoratorPattern;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JOptionPane;

public class DecoratorIceCreamShop extends javax.swing.JFrame {

    public DecoratorIceCreamShop() {
        initComponents();

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                int choose = JOptionPane.showConfirmDialog(null,
                        "Do you really want to Logout ?",
                        "Confirm Logout", JOptionPane.YES_NO_OPTION,
                        JOptionPane.INFORMATION_MESSAGE);
                if (choose == JOptionPane.YES_OPTION) {
                    e.getWindow().dispose();
                    new Login().setVisible(true);
                }
            }
        });
    }

    public abstract class IceCream {

        String iceCream;

        public String getIceCream() {
            return iceCream;
        }

        public abstract double cost();

    }

    abstract class IceCreamDecorator extends IceCream {

        public abstract String getIceCream();
    }

    class Strawberry extends IceCream {

        public Strawberry() {
            iceCream = "Strawberry Ice Cream " + " ";
        }

        @Override
        public double cost() {
            return 250;
        }

    }

    class Blueberry extends IceCream {

        public Blueberry() {
            iceCream = "Blueberry Ice Cream ";
        }

        @Override
        public double cost() {
            return 350;
        }

    }

    class FruitAndNuts extends IceCream {

        public FruitAndNuts() {
            iceCream = "Fruit and Nuts Ice Cream ";
        }

        @Override
        public double cost() {
            return 450;
        }

    }

    class Oreos extends IceCreamDecorator {

        IceCream toppings;

        public Oreos(IceCream toppings) {
            this.toppings = toppings;
        }

        @Override
        public String getIceCream() {
            return toppings.getIceCream() + "+ " + "Oreos" + " ";
        }

        @Override
        public double cost() {
            return toppings.cost() + 300;
        }

    }

    class HardChocolateCoating extends IceCreamDecorator {

        IceCream topping;

        public HardChocolateCoating(IceCream topping) {
            this.topping = topping;
        }

        @Override
        public String getIceCream() {
            return topping.getIceCream() + "+ " + "Hard Chocolate Coating" + " ";
        }

        @Override
        public double cost() {
            return topping.cost() + 200;
        }

    }

    class MeltedMarshMallow extends IceCreamDecorator {

        IceCream topping;

        public MeltedMarshMallow(IceCream topping) {
            this.topping = topping;
        }

        @Override
        public String getIceCream() {
            return topping.getIceCream() + "+ " + "Melted Marshmallow" + " ";
        }

        @Override
        public double cost() {
            return topping.cost() + 200;
        }

    }

    class Sprinkles extends IceCreamDecorator {

        IceCream topping;

        public Sprinkles(IceCream topping) {
            this.topping = topping;
        }

        @Override
        public String getIceCream() {
            return topping.getIceCream() + "+ " + "Sprinkles" + " ";
        }

        @Override
        public double cost() {
            return topping.cost() + 200;
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        checkStrawberry = new javax.swing.JCheckBox();
        checkBlueberry = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        checkFruitAndNuts = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        txtTotal = new javax.swing.JLabel();
        btnOrder = new javax.swing.JButton();
        txtCombinations = new javax.swing.JLabel();
        btnCancelOrder = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        checkOreos = new javax.swing.JCheckBox();
        checkHardChocolateCoating = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        checkMeltedMarshmallow = new javax.swing.JCheckBox();
        checkSprinkles = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Snow Den Ice Cream Shop (Decorator Pattern)");
        setLocation(new java.awt.Point(0, 0));
        setSize(new java.awt.Dimension(0, 0));

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Snow Den Ice Cream Shop");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel2)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(80, 80, 80));

        jPanel7.setBackground(new java.awt.Color(51, 51, 51));
        jPanel7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("-  Rs. 250");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("-  Rs. 450");

        checkStrawberry.setBackground(new java.awt.Color(51, 51, 51));
        buttonGroup1.add(checkStrawberry);
        checkStrawberry.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        checkStrawberry.setForeground(new java.awt.Color(255, 255, 255));
        checkStrawberry.setText("Stawberry");

        checkBlueberry.setBackground(new java.awt.Color(51, 51, 51));
        buttonGroup1.add(checkBlueberry);
        checkBlueberry.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        checkBlueberry.setForeground(new java.awt.Color(255, 255, 255));
        checkBlueberry.setText("Blueberry");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("-  Rs. 350");

        checkFruitAndNuts.setBackground(new java.awt.Color(51, 51, 51));
        buttonGroup1.add(checkFruitAndNuts);
        checkFruitAndNuts.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        checkFruitAndNuts.setForeground(new java.awt.Color(255, 255, 255));
        checkFruitAndNuts.setText("Fruit N Nuts");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Ice Cream");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkFruitAndNuts)
                            .addComponent(checkStrawberry)
                            .addComponent(checkBlueberry))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkStrawberry)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBlueberry)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkFruitAndNuts)
                    .addComponent(jLabel6))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.setBackground(new java.awt.Color(51, 51, 51));
        jPanel10.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));

        txtTotal.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        txtTotal.setForeground(new java.awt.Color(255, 255, 255));
        txtTotal.setText("Total : Rs. 0.0");

        btnOrder.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnOrder.setText("Order");
        btnOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderActionPerformed(evt);
            }
        });

        txtCombinations.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtCombinations.setForeground(new java.awt.Color(255, 255, 255));
        txtCombinations.setText("Ice Cream + Topping Combination");

        btnCancelOrder.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCancelOrder.setText("Clear");
        btnCancelOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(btnOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancelOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCombinations, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOrder)
                    .addComponent(btnCancelOrder))
                .addGap(18, 18, 18)
                .addComponent(txtCombinations, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        jPanel8.setBackground(new java.awt.Color(51, 51, 51));
        jPanel8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("-  Rs. 300");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("-  Rs. 200");

        checkOreos.setBackground(new java.awt.Color(51, 51, 51));
        checkOreos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        checkOreos.setForeground(new java.awt.Color(255, 255, 255));
        checkOreos.setText("Oreos");

        checkHardChocolateCoating.setBackground(new java.awt.Color(51, 51, 51));
        checkHardChocolateCoating.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        checkHardChocolateCoating.setForeground(new java.awt.Color(255, 255, 255));
        checkHardChocolateCoating.setText("Hard Chocolate Coating");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("-  Rs. 200");

        checkMeltedMarshmallow.setBackground(new java.awt.Color(51, 51, 51));
        checkMeltedMarshmallow.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        checkMeltedMarshmallow.setForeground(new java.awt.Color(255, 255, 255));
        checkMeltedMarshmallow.setText("Melted Marshmallow");

        checkSprinkles.setBackground(new java.awt.Color(51, 51, 51));
        checkSprinkles.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        checkSprinkles.setForeground(new java.awt.Color(255, 255, 255));
        checkSprinkles.setText("Sprinkles");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("-  Rs. 200");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Toppings");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addContainerGap(20, Short.MAX_VALUE)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(checkSprinkles)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(checkMeltedMarshmallow)
                                            .addComponent(checkHardChocolateCoating))
                                        .addGap(46, 46, 46))
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(checkOreos)
                                        .addGap(156, 156, 156)))
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(checkOreos))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkHardChocolateCoating)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkMeltedMarshmallow)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(checkSprinkles))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(756, 555));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderActionPerformed

        if (!checkStrawberry.isSelected() && !checkBlueberry.isSelected() && !checkFruitAndNuts.isSelected()) {
            JOptionPane.showMessageDialog(this, "Please Select an Ice Cream!");

        } else if (!checkOreos.isSelected() && !checkHardChocolateCoating.isSelected()
                && !checkMeltedMarshmallow.isSelected() && !checkSprinkles.isSelected()) {
            JOptionPane.showMessageDialog(this, "Please Select 1 or More Toppings!");

        } else {

            //Strawberry Combinations
            if (checkStrawberry.isSelected()) {
                if (checkOreos.isSelected()) {
                    IceCream icecream = new Strawberry();
                    icecream = new Oreos(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkHardChocolateCoating.isSelected()) {
                    IceCream icecream = new Strawberry();
                    icecream = new HardChocolateCoating(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkMeltedMarshmallow.isSelected()) {
                    IceCream icecream = new Strawberry();
                    icecream = new MeltedMarshMallow(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkSprinkles.isSelected()) {
                    IceCream icecream = new Strawberry();
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkHardChocolateCoating.isSelected()) {
                    IceCream icecream = new Strawberry();
                    icecream = new Oreos(icecream);
                    icecream = new HardChocolateCoating(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkMeltedMarshmallow.isSelected()) {
                    IceCream icecream = new Strawberry();
                    icecream = new Oreos(icecream);
                    icecream = new MeltedMarshMallow(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new Strawberry();
                    icecream = new Oreos(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkHardChocolateCoating.isSelected() && checkMeltedMarshmallow.isSelected()) {
                    IceCream icecream = new Strawberry();
                    icecream = new HardChocolateCoating(icecream);
                    icecream = new MeltedMarshMallow(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkHardChocolateCoating.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new Strawberry();
                    icecream = new HardChocolateCoating(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkMeltedMarshmallow.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new Strawberry();
                    icecream = new MeltedMarshMallow(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkHardChocolateCoating.isSelected() && checkMeltedMarshmallow.isSelected()) {
                    IceCream icecream = new Strawberry();
                    icecream = new Oreos(icecream);
                    icecream = new HardChocolateCoating(icecream);
                    icecream = new MeltedMarshMallow(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkHardChocolateCoating.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new Strawberry();
                    icecream = new Oreos(icecream);
                    icecream = new HardChocolateCoating(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkMeltedMarshmallow.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new Strawberry();
                    icecream = new Oreos(icecream);
                    icecream = new MeltedMarshMallow(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkHardChocolateCoating.isSelected() && checkMeltedMarshmallow.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new Strawberry();
                    icecream = new HardChocolateCoating(icecream);
                    icecream = new MeltedMarshMallow(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkHardChocolateCoating.isSelected() && checkMeltedMarshmallow.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new Strawberry();
                    icecream = new Oreos(icecream);
                    icecream = new HardChocolateCoating(icecream);
                    icecream = new MeltedMarshMallow(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

            }

            //Blueberry Combinations
            if (checkBlueberry.isSelected()) {
                if (checkOreos.isSelected()) {
                    IceCream icecream = new Blueberry();
                    icecream = new Oreos(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkHardChocolateCoating.isSelected()) {
                    IceCream icecream = new Blueberry();
                    icecream = new HardChocolateCoating(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkMeltedMarshmallow.isSelected()) {
                    IceCream icecream = new Blueberry();
                    icecream = new MeltedMarshMallow(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkSprinkles.isSelected()) {
                    IceCream icecream = new Blueberry();
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkHardChocolateCoating.isSelected()) {
                    IceCream icecream = new Blueberry();
                    icecream = new Oreos(icecream);
                    icecream = new HardChocolateCoating(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkMeltedMarshmallow.isSelected()) {
                    IceCream icecream = new Blueberry();
                    icecream = new Oreos(icecream);
                    icecream = new MeltedMarshMallow(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new Blueberry();
                    icecream = new Oreos(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkHardChocolateCoating.isSelected() && checkMeltedMarshmallow.isSelected()) {
                    IceCream icecream = new Blueberry();
                    icecream = new HardChocolateCoating(icecream);
                    icecream = new MeltedMarshMallow(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkHardChocolateCoating.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new Blueberry();
                    icecream = new HardChocolateCoating(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkMeltedMarshmallow.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new Blueberry();
                    icecream = new MeltedMarshMallow(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkHardChocolateCoating.isSelected() && checkMeltedMarshmallow.isSelected()) {
                    IceCream icecream = new Blueberry();
                    icecream = new Oreos(icecream);
                    icecream = new HardChocolateCoating(icecream);
                    icecream = new MeltedMarshMallow(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkHardChocolateCoating.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new Blueberry();
                    icecream = new Oreos(icecream);
                    icecream = new HardChocolateCoating(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkMeltedMarshmallow.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new Blueberry();
                    icecream = new Oreos(icecream);
                    icecream = new MeltedMarshMallow(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkHardChocolateCoating.isSelected() && checkMeltedMarshmallow.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new Blueberry();
                    icecream = new HardChocolateCoating(icecream);
                    icecream = new MeltedMarshMallow(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkHardChocolateCoating.isSelected() && checkMeltedMarshmallow.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new Blueberry();
                    icecream = new Oreos(icecream);
                    icecream = new HardChocolateCoating(icecream);
                    icecream = new MeltedMarshMallow(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

            }

            //Fruit N Nuts Combinations
            if (checkFruitAndNuts.isSelected()) {
                if (checkOreos.isSelected()) {
                    IceCream icecream = new FruitAndNuts();
                    icecream = new Oreos(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkHardChocolateCoating.isSelected()) {
                    IceCream icecream = new FruitAndNuts();
                    icecream = new HardChocolateCoating(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkMeltedMarshmallow.isSelected()) {
                    IceCream icecream = new FruitAndNuts();
                    icecream = new MeltedMarshMallow(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkSprinkles.isSelected()) {
                    IceCream icecream = new FruitAndNuts();
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkHardChocolateCoating.isSelected()) {
                    IceCream icecream = new FruitAndNuts();
                    icecream = new Oreos(icecream);
                    icecream = new HardChocolateCoating(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkMeltedMarshmallow.isSelected()) {
                    IceCream icecream = new FruitAndNuts();
                    icecream = new Oreos(icecream);
                    icecream = new MeltedMarshMallow(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new FruitAndNuts();
                    icecream = new Oreos(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkHardChocolateCoating.isSelected() && checkMeltedMarshmallow.isSelected()) {
                    IceCream icecream = new FruitAndNuts();
                    icecream = new HardChocolateCoating(icecream);
                    icecream = new MeltedMarshMallow(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkHardChocolateCoating.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new FruitAndNuts();
                    icecream = new HardChocolateCoating(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkMeltedMarshmallow.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new FruitAndNuts();
                    icecream = new MeltedMarshMallow(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkHardChocolateCoating.isSelected() && checkMeltedMarshmallow.isSelected()) {
                    IceCream icecream = new FruitAndNuts();
                    icecream = new Oreos(icecream);
                    icecream = new HardChocolateCoating(icecream);
                    icecream = new MeltedMarshMallow(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkHardChocolateCoating.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new FruitAndNuts();
                    icecream = new Oreos(icecream);
                    icecream = new HardChocolateCoating(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkMeltedMarshmallow.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new FruitAndNuts();
                    icecream = new Oreos(icecream);
                    icecream = new MeltedMarshMallow(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkHardChocolateCoating.isSelected() && checkMeltedMarshmallow.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new FruitAndNuts();
                    icecream = new HardChocolateCoating(icecream);
                    icecream = new MeltedMarshMallow(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

                if (checkOreos.isSelected() && checkHardChocolateCoating.isSelected() && checkMeltedMarshmallow.isSelected() && checkSprinkles.isSelected()) {
                    IceCream icecream = new FruitAndNuts();
                    icecream = new Oreos(icecream);
                    icecream = new HardChocolateCoating(icecream);
                    icecream = new MeltedMarshMallow(icecream);
                    icecream = new Sprinkles(icecream);

                    txtCombinations.setText(icecream.getIceCream());
                    txtTotal.setText("Total Price: Rs. " + icecream.cost());
                }

            }
            JOptionPane.showMessageDialog(this, "Order Successful!");
        }
    }//GEN-LAST:event_btnOrderActionPerformed

    private void btnCancelOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelOrderActionPerformed
        checkStrawberry.setSelected(false);
        checkBlueberry.setSelected(false);
        checkFruitAndNuts.setSelected(false);

        checkOreos.setSelected(false);
        checkHardChocolateCoating.setSelected(false);
        checkMeltedMarshmallow.setSelected(false);
        checkSprinkles.setSelected(false);

        txtCombinations.setText("Ice Cream + Topping Combination");
        txtTotal.setText("Total : Rs. 0.0");

        JOptionPane.showMessageDialog(this, "All Fields Cleared!");
    }//GEN-LAST:event_btnCancelOrderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DecoratorIceCreamShop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DecoratorIceCreamShop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DecoratorIceCreamShop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DecoratorIceCreamShop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DecoratorIceCreamShop().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelOrder;
    private javax.swing.JButton btnOrder;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox checkBlueberry;
    private javax.swing.JCheckBox checkFruitAndNuts;
    private javax.swing.JCheckBox checkHardChocolateCoating;
    private javax.swing.JCheckBox checkMeltedMarshmallow;
    private javax.swing.JCheckBox checkOreos;
    private javax.swing.JCheckBox checkSprinkles;
    private javax.swing.JCheckBox checkStrawberry;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JLabel txtCombinations;
    private javax.swing.JLabel txtTotal;
    // End of variables declaration//GEN-END:variables
}
